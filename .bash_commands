#!/bin/bash
#                                  ┌─────────────────────────────────────────┐
#                                  │        Bash Commands (PERSONAL)         │
#                                  ├─────────────────────────────────────────┤
#                                  │     https://github.com/cyadehn/.vim     │
#                                  └─────────────────────────────────────────┘
#┌─────────────────────────┐
#│        Functions        │
#└─────────────────────────┘
    # Clear with newline
    function clr {
        clear
        echo
    }

    # Print terminal navigation instructions
    function nav {
        echo "MOVE BETWEEN WORDS: Alt + ← + →";
        echo "LINE BEGINNING (CMD+E) / END (CMD+A)";
        echo "CLEAR AT CURSOR BEFORE (CTRL+U) / AFTER (CTRL+K)";
        echo "DELETE WORD BEFORE CURSOR (CTRL+W)";
        echo "SWAP WORDS BEFORE CURSOR (CTRL+T)";
        echo "MOVE CURSOR FWD (CTRL+F) / BACKWARD (CTRL+B)";
        echo "BACKSPACE (CTRL+H)";
    }

    # Source shortcut
    sn () {
        source ~/.bash_profile
        echo "Loaded updated .bash_profile"
    }

    # Git commit shortcut
    commit () {
        echo -n "Enter commit message: "
        read MESSAGE
        git commit -m "$MESSAGE"
    }

    # Update wanikani wallpapers
    wkupdate () {
        cd /Users/christopherdehner/Documents/japanese-study/wk-wallpaper/general
        ./wpupdate.command
        wait
        cd /Users/christopherdehner/Documents/japanese-study/wk-wallpaper/jlpt
        ./wpupdate.command
        wait
        cd /Users/christopherdehner/Documents/japanese-study/wk-wallpaper/levels
        ./wpupdate.command
    }

    # Compare directory contents
    compareDir () {
        echo -n "Enter project name: "
        read PROJECT
        echo -n "Enter source directory: "
        read SOURCE
        echo -n "Enter name for source: "
        read SOURCENAME
        SOURCEFILEDIR=~/Desktop/$SOURCENAME.txt
        cd $SOURCE
        tree --charset=ascii | tee ~/Desktop/$SOURCENAME.txt
        wait
        echo -n "Enter clone directory: "
        read CLONE
        echo -n "Enter name for source: "
        read CLONENAME
        CLONEFILEDIR=~/Desktop/$CLONENAME.txt
        cd $CLONE
        tree --charset=ascii | tee ~/Desktop/$CLONENAME.txt
        wait
        SDIFF=~/Desktop/$SOURCENAME-to-$CLONENAME-sdiff.txt
        sdiff $SOURCEFILEDIR $CLONEFILEDIR | tee $SDIFF
        wait
        grep -a ">" $SDIFF
        grep -a "<" $SDIFF
    }

    # Prompt for preference files
    function pref {
        currentDir=$(pwd)
        cd ~/.dotfiles
        INPUT=/tmp/menu.sh.$$
        # Storage file for displaying cal and date command output
        OUTPUT=/tmp/output.sh.$$
        # Store return value
        RETURN=/tmp/returnval.sh.$$
        # get text editor or fall back to vi_editor
        vi_editor=${EDITOR-nvim}
        #trap and delete temp files
        trap 'rm $OUTPUT; rm $INPUT; rm $RETURN exit' SIGHUP SIGINT SIGTERM
        while true
        do
            command dialog --clear \
                --backtitle "Preference file selection screen" \
                --title "[ M A I N  M E N U ]" \
                --menu "Choose preference type: " 0 0 0 \
                BASH-FILES "Edit bash dotfiles" \
                NVIM "Edit Nvim dotfiles" \
                ESC "Exit to the shell" 2>"${INPUT}" 3>"${RETURN}"	
                                escapeseq=$?
                                menuitem=$(<"${INPUT}")
            if [ $escapeseq != 1 ] && [ $escapeseq != 255 ]
            then
                case $menuitem in
                    BASH-FILES) 
                        command nvim ~/.dotfiles/bash/.bash*; wait;;
                    NVIM) 
                        command nvim ~/.dotfiles/nvim/*.vim; wait;;
                    ESC) 
                        break;;
                esac
            fi
            case $escapeseq in
                1)
                    break;;
                255)
                    break;;
            esac
        done
        dialog --yesno "Push updates to Git?" 0 0
        case $? in
            0)
                vit;;
        esac
        sn
        cd $currentDir
        clr
    }
    function .init() {
        echo -n "Enter project name: "
        read NAME
        dotnet new sln -o $NAME
        wait
        cd $NAME
        wait
        dotnet new console -o $NAME
        wait
        dotnet sln add ./$NAME/$NAME.csproj
        wait
        dotnet new xunit -o $NAME.Tests
        wait
        dotnet add ./$NAME.Tests/$NAME.Tests.csproj reference ./$NAME/$NAME.csproj
        wait
        dotnet sln add ./$NAME.Tests/$NAME.Tests.csproj
    }
    function vit() {
        dir=$(pwd)
        cd ~/.vim
        DIRECTORIES=$(tree -L 2)
        tree -L 1 ~/.vim/bundle > dir.txt
        tree -L 1 ~/.vim/colors >> dir.txt
        tree -L 1 ~/.vim/plugin >> dir.txt
        tree -L 1 ~/.vim/plugged >> dir.txt
        tree -L 1 ~/.vim/autoload >> dir.txt
        rm Brewfile
        brew bundle dump
        echo -n "Updates made: "
        read UPDATES
        git add .
        git commit -m "$UPDATES"
        git push
        cd $dir
    }
